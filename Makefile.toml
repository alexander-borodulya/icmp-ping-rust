[config]
skip_core_tasks = true

#
# Profile based environment override
#
[env.development]
BUILD_DEBUG = true
TARGET_PROFILE_DIR_NAME = "debug"

[env.production]
BUILD_RELEASE = true
TARGET_PROFILE_DIR_NAME = "release"

#
# Install Dependencies
#

[tasks.install_nightly]
private = true
description = "Installs nightly toolchain - Installing the nightly toolchain is necessary by rustfmt options that available for nightly only"
category = "Dependencies"
script = ["rustup toolchain install nightly"]

[tasks.install_tokio_console]
private = true
description = "Install tokio console - a debugger for asynchronous Rust programs"
category = "Dependencies"
script = ["cargo install --locked tokio-console"]

[tasks.install_clippy]
private = true
description = "Installs clippy"
category = "Dependencies"
script = ["rustup component add clippy"]

[tasks.install_rustfmt]
private = true
description = "Installs rustfmt"
category = "Dependencies"
script = ["rustup component add rustfmt"]

[tasks.install_dependencies]
description = "Installs all required dependencies"
category = "dependencies"
run_task = [
    { name = "install_nightly" },
    { name = "install_tokio_console" },
    { name = "install_clippy" },
    { name = "install_rustfmt"}
]

#
# Format
#

[tasks.format]
private = true
description = "Apply formatting"
category = "build"
script = ["cargo +nightly fmt"]

#
# Build
#

[tasks.clippy]
description = "Checks a package to catch common mistakes using clippy"
category = "build"
command = "cargo"
args = ["clippy"]
condition = { profiles = ["production"] }

[tasks.rebuild]
description = "Rebuild the project (clean, then build)"
category = "build"
run_task = "build"
dependencies = ["clean"]

[tasks.build]
description = "Builds current project"
category = "build"
run_task = [
    { name = "build_development", condition = { env_true = [ "BUILD_DEBUG" ] } },
    { name = "build_production", condition = { env_true = [ "BUILD_RELEASE" ] } },
]
dependencies = ["clippy", "format"]

[tasks.build_development]
private = true
description = "Builds current project in development mode"
category = "build"
command = "cargo"
args = ["build"]

[tasks.build_production]
private = true
description = "Builds current project in production mode"
category = "build"
command = "cargo"
args = ["build", "--release"]

[tasks.clean]
description = "Cleans project (both debug and release)"
category = "build"
command = "cargo"
args = ["clean"]

#
# setcap CAP_NET_RAW
#

[tasks.setcap]
description = "Set CAP_NET_RAW capabilities being used for RAW sockets. Requires root privileges for running."
category = "post-build"
run_task = [
    { name = "setcap_linux", condition = { platforms = [ "linux" ] } },
    { name = "setcap_platform_unsupported", condition = { platforms = [ "windows", "mac" ] } },
]

[tasks.setcap_linux]
private = true
script = [
    "sudo setcap cap_net_raw+ep target/${TARGET_PROFILE_DIR_NAME}/${CARGO_MAKE_CRATE_NAME}"
]
dependencies = ["build"]

[tasks.setcap_platform_unsupported]
private = true
script = [
    "echo \"Setting of CAP_NET_RAW capabilities for the [${CARGO_MAKE_CRATE_NAME}] crate isn't implemented yet on the [${CARGO_MAKE_RUST_TARGET_OS}] platform\"",
]
